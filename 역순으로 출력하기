12/25

https://github.com/ciellleen/1225/blob/main/%EC%97%AD%EC%9C%BC%EB%A1%9C%20%EB%82%98%ED%83%80%EB%82%B4%EA%B8%B0

[+ 추가 공부 1(정수를 뒤집는 4가지 방법)](https://www.notion.so/1-4-167606e044e780e182ffe31b44305c02?pvs=21)

[+ 추가 공부 2(문자열을 역순으로 출력하기)](https://www.notion.so/2-167606e044e78060a3efc29f13a529f3?pvs=21)

# 문제

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/8a638a6a-35c9-4460-9c3d-f64d322301db/image.png)

# 코드

```c
#include <stdio.h>
#include <math.h>

int reverse(int n) 
{
   int digits = (int)log10(n);  
   
   int result = 0;
   while(n > 0) 
   {
       result += (n % 10) * (int)pow(10, digits--);  
       n /= 10;
   }
   return result;
}

int main() 
{
   int number;
   printf("숫자 입력: ");
   scanf("%d", &number);
   printf("뒤집은 결과: %d\n", reverse(number));
   return 0;
}

```

# 결과

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/677b03d3-5ddb-4ca5-8094-ec3c321d7286/image.png)

![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/43f4c680-a7ab-4f2d-b233-d37ec40472ce/a8c51e1a-9fc0-4a1a-a00f-e015f2928a11/image.png)

# 코드 분석

```c
#include <stdio.h>
#include <math.h>

// 정수 n을 뒤집는 함수
int reverse(int n) 
{
   // 숫자의 자릿수 구하기. log10(n)을 사용하여 자릿수를 계산하고, 이를 정수형으로 변환
   int digits = (int)log10(n);
   
   int result = 0;
   
   // n이 0보다 클 동안 반복 (각 자리를 하나씩 뒤집음)
   while(n > 0) 
   {
       // n의 마지막 자릿수(n % 10)를 result에 추가
       // (int)pow(10, digits--)는 현재 자릿수 위치에 맞는 10의 거듭제곱 값을 계산
       result += (n % 10) * (int)pow(10, digits--);  
       
       // n에서 마지막 자릿수 제거
       n /= 10;
   }
   
   return result;  // 뒤집힌 숫자 반환
}

int main() 
{
   int number;
   printf("숫자 입력: ");  
   scanf("%d", &number);  
   printf("뒤집은 결과: %d\n", reverse(number));
   return 0;  
}

```

<aside>
💡

int digits = (int)log10(n);

</aside>

- log10(n)은 n의 자릿수를 구하는데 사용됨.
- digits 변수는 n의 자릿수에서 1을 뺀 값임.

<aside>
💡

while(n > 0)

</aside>

- while 루프를 숫자 n이 0보다 클 때까지 반복함.
    
    ⇒ 즉 숫자의 모든 자릿수를 처리하기 위한 것
    
- 반복 과정:
    - 숫자 n의 마지막 자릿수를 처리하고, 그 자릿수를 제거하는 방식
    - 반복할때마다 n이 0보다 작아지면, 모든 자릿수를 뒤집은 후 종료

<aside>
💡

result += (n % 10) * (int)pow(10, digits--);

</aside>

- 숫자n의 마지막 자릿수를 추출하고, 뒤집어서 result에 더하는 부분
- n%10
    - 숫자 n의 가장 오른쪽 자리를 추출.
- (int)pow(10, digits--)
    - digits의 값은 앞서 구한 숫자 n의 자릿수 -1임.
    - pow(10, digits)는 10의 거듭 제곱을 계산.
- digits--
    - digits 값은 한 자리를 처리할 때마다 감소함.
    - 계속해서 감소하여, 뒤집히는 숫자의 자릿수를 조정

<aside>
💡

n /= 10;

</aside>

- 숫자n의 마지막 자리를 제거하는 작업.

<aside>
💡

최종 결과

</aside>

- result는 모든 자릿수를 뒤집은 숫자를 저장합니다.

<aside>
💡

전체 흐름 정리

</aside>

- digits는 숫자의 자릿수를 계산.
- while 루프는 숫자의 각 자리를 분리하여 뒤집어 result에 추가.
- digits--는 자릿수를 감소시키면서 10의 거듭 제곱을 맞추고, 자릿수를 뒤집기.
- n /= 10으로 숫자의 각 자리를 제거하며, 루프가 끝날 때까지 계속하기.

# digit랑 pow

### digit

- 특정 숫자 n의 자릿수(숫자에 몇 자리가 있는지)를 나타내는 변수.

### pow

- 수학 함수로, **거듭 제곱**을 계산하는 함수.
- 즉, 주어진 숫자를 특정 제곱으로 계산함.

### 이 코드에서의 역할:

- digits는 숫자의 자릿수를 추적하기 위한 변수로, log10(n)을 통해 계산.
- pow는 거듭 제곱을 계산하는 함수로, 주로 숫자의 자리 위치를 결정하는 데 사용.
